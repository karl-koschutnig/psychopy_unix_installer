name: reusable test workflow

on:
  workflow_call:
    inputs:
      build-mode:
        required: false
        type: boolean
        default: false
        description: 'Whether to run tests with build mode enabled'
      quick-mode:
        required: false
        type: boolean
        default: false
        description: 'Run in quick mode with only ubuntu-latest as the OS'

jobs:
  run-installer:
    runs-on: ${{ inputs.quick-mode && fromJson(format('["{0}"]', matrix.os)) || fromJson(format('["self-hosted", "{0}"]', matrix.os)) }}
    strategy:
      matrix:
        os: ${{ inputs.quick-mode && fromJson('["ubuntu-24.04", "ubuntu-22.04", "ubuntu-20.04"]') || fromJson('["ubuntu-24", "ubuntu-22", "ubuntu-20", "debian-12", "debian-11", "fedora-39", "fedora-40", "pop-22", "rocky-9", "centos-9", "manjarolinux-25", "opensuse-leap-15", "linuxmint-22"]') }}
        python_version: ${{ inputs.build-mode && fromJson('["3.10"]') || fromJson('["3.8", "3.9", "3.10"]') }}
        psychopy_version: ${{ inputs.build-mode && fromJson('["latest"]') || fromJson('["latest", "2024.1.4", "2023.2.3"]') }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment and install
        env:
          PYTHON_VERSION: ${{ matrix.python_version }}
          PSYCHOPY_VERSION: ${{ matrix.psychopy_version }}
        run: |    
          sudo chmod +x $GITHUB_WORKSPACE/psychopy_linux_installer
          sudo rm -rf /tmp_dir
          sudo mkdir /tmp_dir
          sudo chown -R $USER:$(id -gn $USER) /tmp_dir
          cp -rf $GITHUB_WORKSPACE/.github/PsychoPy_tests /tmp_dir/
          
          BUILD_FLAG="${{ inputs.build-mode && '--build=both' || '' }}"
          ARGS="--python-version=$PYTHON_VERSION --psychopy-version=$PSYCHOPY_VERSION --install-dir=/tmp_dir --venv-name=psychopy -f --non-interactive $BUILD_FLAG"
          $GITHUB_WORKSPACE/psychopy_linux_installer $ARGS

      - name: Verify PsychoPy installation and version
        run: |
          if [ "$PSYCHOPY_VERSION" = "latest" ]; then
            PSYCHOPY_VERSION=$(curl -s "https://pypi.org/pypi/psychopy/json" | jq -r .info.version)
          fi
          
          if ! /tmp_dir/psychopy/bin/psychopy -v | grep -qE "PsychoPy3, version $PSYCHOPY_VERSION"; then
              echo "PsychoPy version check failed. Expected version: $PSYCHOPY_VERSION"
              exit 1
          else
              /tmp_dir/psychopy/bin/psychopy -v
          fi
        
      - name: Install xvfb
        if: ${{ inputs.quick-mode }}
        run: |
          sudo apt-get update && sudo apt-get install -y xvfb
          sleep 2

      - name: Run basic PsychoPy test
        run: |
          cd /tmp_dir/PsychoPy_tests
          if [ "${{ inputs.quick-mode }}" = "true" ]; then
            xvfb-run -s "-screen 0 1024x768x24" /tmp_dir/psychopy/bin/python -m unittest psychopy_test -v
          else
            /tmp_dir/psychopy/bin/python -m unittest psychopy_test -v
          fi
          sleep 2

      - name: Run extended PsychoPy Tests
        run: |
          cd /tmp_dir/PsychoPy_tests
          if [ "${{ inputs.quick-mode }}" = "true" ]; then
            xvfb-run -s "-screen 0 1024x768x24" /tmp_dir/psychopy/bin/python -m unittest psychopy_test_extended -v
          else
            /tmp_dir/psychopy/bin/python -m unittest psychopy_test_extended -v
          fi
          sleep 2

      - name: Run Stroop Test
        id: run_stroop
        if: ${{ matrix.psychopy_version != '2023.2.3' }}
        run: |
          # Disable immediate exit on error
          set +e
      
          cd /tmp_dir/PsychoPy_tests/stroop
      
          if [ "${{ inputs.quick-mode }}" = "true" ]; then
            output=$(xvfb-run -s "-screen 0 1024x768x24" /tmp_dir/psychopy/bin/python stroop_lastrun.py 2>&1)
            exit_code=$?
          else
            output=$(/tmp_dir/psychopy/bin/python stroop_lastrun.py 2>&1)
            exit_code=$?
          fi
      
          # Print the full output to the log
          echo "=== Stroop Task Output ==="
          echo "$output"
      
          # Check for warnings and add GitHub annotations
          if echo "$output" | grep -iq "warning"; then
            warning_lines=$(echo "$output" | grep -i "warning")
            echo "::warning::Warnings detected during the Stroop test run: $warning_lines"
          fi
      
          # If the command failed, add an error annotation
          if [ $exit_code -ne 0 ]; then
            echo "::error::Stroop test failed with exit code $exit_code. See above output for details."
          fi
      
          # Exit with the captured exit code so the step status reflects the task result
          exit $exit_code
          sleep 2

      - name: Cleanup
        if: always()
        run: |
          sudo rm -rf /tmp_dir ~/Desktop/* ~/.local/share/applications/* 
